#!/usr/bin/env node

// Testing loop performance for the most used array methods in JavaScript
console.time('Test Execution Duration');

const arraySize = parseInt(1e5); // 100000
const testArray = Array(arraySize);
// Pre-allocating memory for the map function returned array to avoid memory realloacation per
// iteration (as repeated `mapArray.push(el)` calls would eventually do). We are declaring it as a
// global variable in order to not impact the perfomance measure of the loopMap function (line 164).
const mapArray = Array(arraySize);

const testResultsArray = [];
const iterations = 1500;
// Generating 1500 (iterations) test results
for (let i = 0; i < iterations; i++) {
  // using push here, once we're just aggregating results for 
  // tests that were already executed in their isolated scopes
  testResultsArray.push(generateTestResults(testArray));
}

// Calculating average test result for each operation after 1500 different tests
const resultProps = [
  'forEach','forLoop',
  'mapMethod','mapLoop',
  'findMethod', 'findLoop',
  'findIndexMethod','findIndexLoop',
  'filterMethod','filterLoop',
  'reduceMethod','reduceLoop'
];
const results = {};
for (const prop of resultProps) {
  const currentPropResultSum = testResultsArray
    .reduce((acc, result) => acc + result[prop], 0);
  results[prop] = Number((currentPropResultSum / testResultsArray.length).toFixed(5));
}

console.log(`Average Results for ${iterations} test samples from arrays with ${arraySize} random numbers from 1 to 10000.`);
console.table([
  { 
    Operation: 'For', 'Method (ms)': results.forEach,
    'Loop (ms)': results.forLoop,
    'Difference (loop - method)': Number((results.forLoop - results.forEach).toFixed(5))
  },
  { 
    Operation: 'Map', 'Method (ms)': results.mapMethod,
    'Loop (ms)': results.mapLoop,
    'Difference (loop - method)': Number((results.mapLoop - results.mapMethod).toFixed(5))
  },
  { 
    Operation: 'Find', 'Method (ms)': results.findMethod,
    'Loop (ms)': results.findLoop,
    'Difference (loop - method)': Number((results.findLoop - results.findMethod).toFixed(5))
  },
  { 
    Operation: 'FindIndex', 'Method (ms)': results.findIndexMethod,
    'Loop (ms)': results.findIndexLoop,
    'Difference (loop - method)': Number((results.findIndexLoop - results.findIndexMethod).toFixed(5))
  },
  { 
    Operation: 'Filter', 'Method (ms)': results.filterMethod,
    'Loop (ms)': results.filterLoop,
    'Difference (loop - method)': Number((results.filterLoop - results.filterMethod).toFixed(5))
  },
  { 
    Operation: 'Reduce', 'Method (ms)': results.reduceMethod,
    'Loop (ms)': results.reduceLoop,
    'Difference (loop - method)': Number((results.reduceLoop - results.reduceMethod).toFixed(5))
  }
]);

console.timeEnd('Test Execution Duration');


function generateTestResults(testArray) {
  // For x ForEach
  const forEachStart = Date.now();
  testArray.forEach((_, i) => {
    testArray[i] = Math.ceil(Math.random() * 10000);
  });
  const forEachEnd = Date.now();
  const forEach = forEachEnd - forEachStart;

  const forLoopStart = Date.now();
  for (let i = 0; i < testArray.length; i++) {
    testArray[i] = Math.ceil(Math.random() * 10000);
  }
  const forLoopEnd = Date.now();
  const forLoop = forLoopEnd - forLoopStart;

  // Map
  const mapMethodStart = Date.now();
  testArray.map(v => v % 2);
  const mapMethodEnd = Date.now();
  const mapMethod = mapMethodEnd - mapMethodStart;

  const mapLoopStart = Date.now();
  loopMap(testArray, '% 2');
  const mapLoopEnd = Date.now();
  const mapLoop = mapLoopEnd - mapLoopStart;

  // Find
  const findMethodStart = Date.now();
  testArray.find(v => v === 255);
  const findMethodEnd = Date.now();
  const findMethod = findMethodEnd - findMethodStart;

  const findLoopStart = Date.now();
  loopFind(testArray, 255);
  const findLoopEnd = Date.now();
  const findLoop = findLoopEnd - findLoopStart;

  // FindIndex - redundant once we've tested Find, why not though?
  const findIndexMethodStart = Date.now();
  testArray.findIndex(v => v === 255);
  const findIndexMethodEnd = Date.now();
  const findIndexMethod = findIndexMethodEnd - findIndexMethodStart;

  const findIndexLoopStart = Date.now();
  loopFindIndex(testArray, 255);
  const findIndexLoopEnd = Date.now();
  const findIndexLoop = findIndexLoopEnd - findIndexLoopStart;

  // Filter
  const filterMethodStart = Date.now();
  testArray.filter(v => v % 2 === 0);
  const filterMethodEnd = Date.now();
  const filterMethod = filterMethodEnd - filterMethodStart;

  const filterLoopStart = Date.now();
  loopFilter(testArray, '% 2 === 0');
  const filterLoopEnd = Date.now();
  const filterLoop = filterLoopEnd - filterLoopStart;

  // Reduce
  const reduceMethodStart = Date.now();
  testArray.reduce((acc, el) => acc + el, 0);
  const reduceMethodEnd = Date.now();
  const reduceMethod = reduceMethodEnd - reduceMethodStart;

  const reduceLoopStart = Date.now();
  loopReduce(testArray, (acc, el) => acc + el, 0);
  const reduceLoopEnd = Date.now();
  const reduceLoop = reduceLoopEnd - reduceLoopStart;

  return {
    forEach,
    forLoop,
    mapMethod,
    mapLoop,
    findMethod, 
    findLoop,
    findIndexMethod,
    findIndexLoop,
    filterMethod,
    filterLoop,
    reduceMethod,
    reduceLoop
  }
}


// Loop alternatives for comparison
function loopMap(array, operation) {
  for (let [i, element] of array.entries()) {
    mapArray[i] = eval(`${element} ${operation}`);
  }
  return mapArray;
}

function loopFind(array, value) {
  for (let currentValue of array) {
    if (currentValue === value) return value;
  }
  return undefined;
}

function loopFindIndex(array, value) {
  for (let [i, currentValue] of array.entries()) {
    if (currentValue === value) return i;
  }
  return -1;
}

function loopFilter(array, condition) {
  const filteredArray = [];
  for (let value of array) {
    // Only supports numbers, if you want to support also strings, you need something like the logic bellow
    // const condition = typeof value === 'string' ? `'${value}' ${condition}` : `${value} ${condition}`;
    // It's not a 100% filter counterpart and won't for objects (e.g). Tt's enough for this example, though.
    if (eval(`${value} ${condition}`)) {
      filteredArray.push(value);
    }
  }
  return filteredArray;
}

function loopReduce(array, fn, acc) {
  for (let element of array) {
    acc = fn(acc, element);
  }
  return acc;
}
