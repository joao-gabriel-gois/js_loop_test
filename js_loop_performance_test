#!/usr/bin/env node

// Testing loop performance for the most used array methods in JavaScript
console.time('Test Execution Duration');

const arraySize = parseInt(1.4 * 1e5); // 140000
const samples = Array(arraySize);
// Pre-allocating memory for the map function returned array to avoid memory realloacation per
// iteration (as repeated `mapArray.push(el)` calls would eventually do). We are declaring it as a
// global variable in order to not impact the perfomance measure of the loopMap function (line 164).
const mapArray = Array(arraySize);

const testResults = [];
const iterations = 2000;
// Generating 2000 (iterations) test results
for (let i = 0; i < iterations; i++) {
  // using push here, once we're just aggregating results for 
  // tests that were already executed in their isolated scopes
  testResults.push(generateTestResults(samples));
}

// Calculating average test result for each operation after 2000 different samples
const resultProps = [
  'forEach',         'forLoop',
  'mapMethod',       'mapLoop',
  'findMethod',      'findLoop',
  'findIndexMethod', 'findIndexLoop',
  'filterMethod',    'filterLoop',
  'reduceMethod',    'reduceLoop',
];

const avgResults = {};
for (const prop of resultProps) {
  const currentPropResultSum = testResults
    .reduce((acc, result) => acc + result[prop], 0);
  avgResults[prop] = { mean: NaN }; // without that, bellow reassign will return an error ('trying to reach undefined.mean')
  avgResults[prop].mean = currentPropResultSum / testResults.length;
}

// Adding standard deviation to results
for (const prop of resultProps) {
  const varianceTotalNumerator = testResults
    .reduce((acc, result) => { 
      return acc + ((result[prop] - avgResults[prop].mean) ** 2)
    }, 0);

  avgResults[prop].standardDeviation = Number(
    (varianceTotalNumerator / testResults.length) ** 0.5
  ); // sqrt of the variance
}

const avgResutlsFormattedTable = [];
for (let i = 0; i < resultProps.length; i += 2) {
  const method = resultProps[i]
  const loop = resultProps[i + 1];
  const methodCV = (avgResults[method].mean !== 0 ? (avgResults[method].standardDeviation / avgResults[method].mean * 100).toFixed(2) : 0) + '%';
  const loopCV = (avgResults[loop].mean !== 0 ? (avgResults[loop].standardDeviation / avgResults[loop].mean * 100).toFixed(2) : 0) + '%';
  const avgDiff = Number((avgResults[loop].mean - avgResults[method].mean).toFixed(5)) + '%';
  const stdDevDiff = Number((avgResults[loop].standardDeviation - avgResults[method].standardDeviation).toFixed(5));
  
  avgResutlsFormattedTable.push({
    Operation: `${capitalize(method.split('M')[0])} (ms)`, 
    'Avg. Method': Number((avgResults[method].mean).toFixed(6)),
    'Std. Dev. Method': Number((avgResults[method].standardDeviation).toFixed(6)),
    'Coeff. of Variation (Method)': methodCV,
    'Avg. Loop':  Number((avgResults[loop].mean).toFixed(6)),
    'Std. Dev. Loop': Number((avgResults[loop].standardDeviation).toFixed(6)),
    'Coeff. of Variation (Loop)': loopCV,
    'Avg. Diff.(loop - method)': avgDiff,
    'Std. Diff.(loop - method)': stdDevDiff
  });
};

console.log(`Average Results for ${iterations} test samples from arrays with ${arraySize} random numbers from 1 to 10000.`);
console.table(avgResutlsFormattedTable);

console.timeEnd('Test Execution Duration');


// Individual Test logic
function generateTestResults(samples) {
  // For x ForEach
  const forEachStart = Date.now();
  samples.forEach((_, i) => {
    samples[i] = Math.ceil(Math.random() * 10000);
  });
  const forEachEnd = Date.now();
  const forEach = forEachEnd - forEachStart;

  const forLoopStart = Date.now();
  for (let i = 0; i < samples.length; i++) {
    samples[i] = Math.ceil(Math.random() * 10000);
  }
  const forLoopEnd = Date.now();
  const forLoop = forLoopEnd - forLoopStart;

  // Map
  const mapMethodStart = Date.now();
  samples.map(v => v % 2);
  const mapMethodEnd = Date.now();
  const mapMethod = mapMethodEnd - mapMethodStart;

  const mapLoopStart = Date.now();
  loopMap(samples, '% 2');
  const mapLoopEnd = Date.now();
  const mapLoop = mapLoopEnd - mapLoopStart;

  // Find
  const findMethodStart = Date.now();
  samples.find(v => v === 255);
  const findMethodEnd = Date.now();
  const findMethod = findMethodEnd - findMethodStart;

  const findLoopStart = Date.now();
  loopFind(samples, 255);
  const findLoopEnd = Date.now();
  const findLoop = findLoopEnd - findLoopStart;

  // FindIndex - redundant once we've tested Find, why not though?
  const findIndexMethodStart = Date.now();
  samples.findIndex(v => v === 255);
  const findIndexMethodEnd = Date.now();
  const findIndexMethod = findIndexMethodEnd - findIndexMethodStart;

  const findIndexLoopStart = Date.now();
  loopFindIndex(samples, 255);
  const findIndexLoopEnd = Date.now();
  const findIndexLoop = findIndexLoopEnd - findIndexLoopStart;

  // Filter
  const filterMethodStart = Date.now();
  samples.filter(v => v % 2 === 0);
  const filterMethodEnd = Date.now();
  const filterMethod = filterMethodEnd - filterMethodStart;

  const filterLoopStart = Date.now();
  loopFilter(samples, '% 2 === 0');
  const filterLoopEnd = Date.now();
  const filterLoop = filterLoopEnd - filterLoopStart;

  // Reduce
  const reduceMethodStart = Date.now();
  samples.reduce((acc, el) => acc + el, 0);
  const reduceMethodEnd = Date.now();
  const reduceMethod = reduceMethodEnd - reduceMethodStart;

  const reduceLoopStart = Date.now();
  loopReduce(samples, (acc, el) => acc + el, 0);
  const reduceLoopEnd = Date.now();
  const reduceLoop = reduceLoopEnd - reduceLoopStart;

  return {
    forEach,
    forLoop,
    mapMethod,
    mapLoop,
    findMethod, 
    findLoop,
    findIndexMethod,
    findIndexLoop,
    filterMethod,
    filterLoop,
    reduceMethod,
    reduceLoop
  }
}


// Loop alternatives for comparison
function loopMap(array, operation) {
  for (let [i, element] of array.entries()) {
    mapArray[i] = eval(`${element} ${operation}`);
  }
  return mapArray;
}

function loopFind(array, value) {
  for (let currentValue of array) {
    if (currentValue === value) return value;
  }
  return undefined;
}

function loopFindIndex(array, value) {
  for (let [i, currentValue] of array.entries()) {
    if (currentValue === value) return i;
  }
  return -1;
}

function loopFilter(array, condition) {
  const filteredArray = [];
  for (let value of array) {
    // Only supports numbers, if you want to support also strings, you need something like the logic bellow
      // const condition = typeof value === 'string' ? `'${value}' ${condition}` : `${value} ${condition}`;
    // It's not a 100% filter counterpart and won't work for objects (e.g). It's enough for this example, though.
    if (eval(`${value} ${condition}`)) {
      filteredArray.push(value);
    }
  }
  return filteredArray;
}

function loopReduce(array, fn, acc) {
  for (let element of array) {
    acc = fn(acc, element);
  }
  return acc;
}

// Util
function capitalize(string) {
  return string[0].toUpperCase() + string.slice(1, string.length);
}
